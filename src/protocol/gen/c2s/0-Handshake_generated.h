// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_0HANDSHAKE_C2S_H_
#define FLATBUFFERS_GENERATED_0HANDSHAKE_C2S_H_

#include "flatbuffers/flatbuffers.h"

namespace c2s {

struct Handshake;

struct Handshake FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_VERSIONID = 4
  };
  uint16_t versionId() const { return GetField<uint16_t>(VT_VERSIONID, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint16_t>(verifier, VT_VERSIONID) &&
           verifier.EndTable();
  }
};

struct HandshakeBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_versionId(uint16_t versionId) { fbb_.AddElement<uint16_t>(Handshake::VT_VERSIONID, versionId, 0); }
  HandshakeBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  HandshakeBuilder &operator=(const HandshakeBuilder &);
  flatbuffers::Offset<Handshake> Finish() {
    auto o = flatbuffers::Offset<Handshake>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<Handshake> CreateHandshake(flatbuffers::FlatBufferBuilder &_fbb,
    uint16_t versionId = 0) {
  HandshakeBuilder builder_(_fbb);
  builder_.add_versionId(versionId);
  return builder_.Finish();
}

inline const c2s::Handshake *GetHandshake(const void *buf) { return flatbuffers::GetRoot<c2s::Handshake>(buf); }

inline bool VerifyHandshakeBuffer(flatbuffers::Verifier &verifier) { return verifier.VerifyBuffer<c2s::Handshake>(nullptr); }

inline void FinishHandshakeBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<c2s::Handshake> root) { fbb.Finish(root); }

}  // namespace c2s

#endif  // FLATBUFFERS_GENERATED_0HANDSHAKE_C2S_H_
