// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_1KICK_S2C_H_
#define FLATBUFFERS_GENERATED_1KICK_S2C_H_

#include "flatbuffers/flatbuffers.h"

namespace s2c {

struct Kick;

struct Kick FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_REASON = 4
  };
  const flatbuffers::String *reason() const { return GetPointer<const flatbuffers::String *>(VT_REASON); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_REASON) &&
           verifier.Verify(reason()) &&
           verifier.EndTable();
  }
};

struct KickBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_reason(flatbuffers::Offset<flatbuffers::String> reason) { fbb_.AddOffset(Kick::VT_REASON, reason); }
  KickBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  KickBuilder &operator=(const KickBuilder &);
  flatbuffers::Offset<Kick> Finish() {
    auto o = flatbuffers::Offset<Kick>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<Kick> CreateKick(flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> reason = 0) {
  KickBuilder builder_(_fbb);
  builder_.add_reason(reason);
  return builder_.Finish();
}

inline flatbuffers::Offset<Kick> CreateKickDirect(flatbuffers::FlatBufferBuilder &_fbb,
    const char *reason = nullptr) {
  return CreateKick(_fbb, reason ? _fbb.CreateString(reason) : 0);
}

inline const s2c::Kick *GetKick(const void *buf) { return flatbuffers::GetRoot<s2c::Kick>(buf); }

inline bool VerifyKickBuffer(flatbuffers::Verifier &verifier) { return verifier.VerifyBuffer<s2c::Kick>(nullptr); }

inline void FinishKickBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<s2c::Kick> root) { fbb.Finish(root); }

}  // namespace s2c

#endif  // FLATBUFFERS_GENERATED_1KICK_S2C_H_
