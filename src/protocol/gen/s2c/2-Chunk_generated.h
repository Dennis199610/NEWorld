// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_2CHUNK_S2C_H_
#define FLATBUFFERS_GENERATED_2CHUNK_S2C_H_

#include "flatbuffers/flatbuffers.h"

namespace s2c {

struct Vec3;

struct Chunk;

MANUALLY_ALIGNED_STRUCT(4) Vec3 FLATBUFFERS_FINAL_CLASS {
 private:
  int32_t x_;
  int32_t y_;
  int32_t z_;

 public:
  Vec3() { memset(this, 0, sizeof(Vec3)); }
  Vec3(const Vec3 &_o) { memcpy(this, &_o, sizeof(Vec3)); }
  Vec3(int32_t _x, int32_t _y, int32_t _z)
    : x_(flatbuffers::EndianScalar(_x)), y_(flatbuffers::EndianScalar(_y)), z_(flatbuffers::EndianScalar(_z)) { }

  int32_t x() const { return flatbuffers::EndianScalar(x_); }
  int32_t y() const { return flatbuffers::EndianScalar(y_); }
  int32_t z() const { return flatbuffers::EndianScalar(z_); }
};
STRUCT_END(Vec3, 12);

struct Chunk FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_POS = 4,
    VT_BLOCKS = 6
  };
  const Vec3 *pos() const { return GetStruct<const Vec3 *>(VT_POS); }
  const flatbuffers::Vector<int32_t> *blocks() const { return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_BLOCKS); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<Vec3>(verifier, VT_POS) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_BLOCKS) &&
           verifier.Verify(blocks()) &&
           verifier.EndTable();
  }
};

struct ChunkBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_pos(const Vec3 *pos) { fbb_.AddStruct(Chunk::VT_POS, pos); }
  void add_blocks(flatbuffers::Offset<flatbuffers::Vector<int32_t>> blocks) { fbb_.AddOffset(Chunk::VT_BLOCKS, blocks); }
  ChunkBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  ChunkBuilder &operator=(const ChunkBuilder &);
  flatbuffers::Offset<Chunk> Finish() {
    auto o = flatbuffers::Offset<Chunk>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<Chunk> CreateChunk(flatbuffers::FlatBufferBuilder &_fbb,
    const Vec3 *pos = 0,
    flatbuffers::Offset<flatbuffers::Vector<int32_t>> blocks = 0) {
  ChunkBuilder builder_(_fbb);
  builder_.add_blocks(blocks);
  builder_.add_pos(pos);
  return builder_.Finish();
}

inline flatbuffers::Offset<Chunk> CreateChunkDirect(flatbuffers::FlatBufferBuilder &_fbb,
    const Vec3 *pos = 0,
    const std::vector<int32_t> *blocks = nullptr) {
  return CreateChunk(_fbb, pos, blocks ? _fbb.CreateVector<int32_t>(*blocks) : 0);
}

inline const s2c::Chunk *GetChunk(const void *buf) { return flatbuffers::GetRoot<s2c::Chunk>(buf); }

inline bool VerifyChunkBuffer(flatbuffers::Verifier &verifier) { return verifier.VerifyBuffer<s2c::Chunk>(nullptr); }

inline void FinishChunkBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<s2c::Chunk> root) { fbb.Finish(root); }

}  // namespace s2c

#endif  // FLATBUFFERS_GENERATED_2CHUNK_S2C_H_
